<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Mindmap Hirarki</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 2rem;
    }
    textarea {
      width: 100%;
      height: 250px;
      font-family: monospace;
      margin-bottom: 1rem;
    }
    .container {
      position: relative;
      width: 3000px;
      height: 2000px;
      border: 1px solid #ccc;
      margin: auto;
      background: #fff;
    }
    .node {
      position: absolute;
      padding: 10px 20px;
      border-radius: 8px;
      color: white;
      font-weight: bold;
      white-space: nowrap;
      text-align: center;
    }
    .level0 { background: #8B0000; }
    .level1 { background: #0074D9; }
    .level2 { background: #FF851B; }
    .level3 { background: #7FDBFF; color: #000; font-weight: normal; }
    .level4 { background: #B10DC9; }
    .level5 { background: #3D9970; }
    .level6 { background: #FF69B4; }
    .level7 { background: #AAAAAA; }

    svg {
      position: absolute;
      top: 0;
      left: 0;
      width: 3000px;
      height: 2000px;
      pointer-events: none;
    }
  </style>
</head>
<body>

<h2>Mindmap Hirarki (Judul → Subjudul → Topik → Subtopik → Sub-subtopik → Sub-sub-subtopik → dst)</h2>

<textarea id="inputText">
SEO Plan
- Target audience
  - Business owner
  - Marketer
- Keyword research
  - Current targeting
  - Plan to target
- SEO optimization
  - SEO title, description
  - Keyword density
    - Short tail keyword
    - Long tail keyword
      - Example 1
      - Example 2
        - book
          - novel
</textarea>

<button onclick="generateMindmap()">Buat Mindmap</button>

<div class="container" id="mindmap">
  <svg id="connections"></svg>
</div>

<script>
function generateMindmap() {
  const input = document.getElementById("inputText").value.trim();
  const container = document.getElementById("mindmap");
  const svg = document.getElementById("connections");
  container.querySelectorAll(".node").forEach(n => n.remove());
  svg.innerHTML = "";

  const lines = input.split("\n").filter(line => line.trim() !== "");
  const parents = [];
  const levelCounters = Array(50).fill(0);

  lines.forEach((line, idx) => {
    const indent = line.match(/^\s*/)[0].length;
    const level = Math.floor(indent / 2);
    const label = line.replace(/^\s*-*/, '').trim();

    const node = document.createElement("div");
    node.className = `node level${level}`;
    node.innerText = label;
    container.appendChild(node);

    const x = 100 + level * 300;
    const y = 60 + levelCounters[level] * 100;
    node.style.left = `${x}px`;
    node.style.top = `${y}px`;

    const nodeData = { x, y, element: node };
    parents[level] = nodeData;
    levelCounters[level]++;

    // Hapus node parent level yang lebih dalam
    for (let i = level + 1; i < parents.length; i++) {
      parents[i] = undefined;
    }

    // Cari parent terdekat ke atas
    for (let p = level - 1; p >= 0; p--) {
      if (parents[p]) {
        drawLine(svg, parents[p], nodeData);
        break;
      }
    }
  });

  function drawLine(svg, from, to) {
    const line = document.createElementNS("http://www.w3.org/2000/svg", "path");
    const startX = from.x + 100;
    const startY = from.y + 20;
    const endX = to.x;
    const endY = to.y + 20;
    const d = `M${startX},${startY} C${startX + 50},${startY} ${endX - 50},${endY} ${endX},${endY}`;
    line.setAttribute("d", d);
    line.setAttribute("stroke", "#666");
    line.setAttribute("stroke-width", "2");
    line.setAttribute("fill", "none");
    svg.appendChild(line);
  }
}
</script>

</body>
</html>
